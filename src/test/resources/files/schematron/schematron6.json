{
  "_id": {
    "$oid": "62e00fca860b5f353a662343"
  },
  "content_schematron": {
    "$binary": {
      "base64": "",
      "subType": "00"
    }
  },
  "name_schematron": "schematronFSEv15.sch",
  "template_id_root": "2.16.840.1.113883.2.9.10.1.1",
  "version": "1.0",
  "last_update_date": {
    "$date": "2022-07-26T16:01:14.482Z"
  }
}
